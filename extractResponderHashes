#!/bin/bash
#
## =========================================================
## Name: extractResponderHashes
## Auth: @litsnarf
## Desc: Extract/Filter hashes from Responder-Session.log files
## =========================================================
##
## Usage: ./extractResponderHashes [-i|--input] <Responder-Session.log> [-o|--output,-A,--start,--end,-P "SMB|FTP" -H "NTLMv2|NTLMv2-SSP", -U, -D]
##
##  Input/Output options
##    -i, --input  <filename>           Responder log file to parse
##    -o, --output <filename>           Output results into a file 
##    -I, --show-ip                     Print client information for each hash
##
##  Filter options
##    -A:                               Extract ALL the hashes for every user. By default extraxt the first occurence
##    -P, --protocols <protocol_name>   Protocol(s) for which you want the hashes. Separate with pipe (|): -P "SMB|HTTP|SMBv2|FTP"
##    -H, --hash-type <HASH_TYPE>       HASH_TYPE for which you want the hashes. Separate with pipe (|): -H "NTLMv2|NTLMv2-SSP"
##    -U, --user <username>             Filter hashes for a specific username
##    -D, --domain                      Filter hashes for a specific domain
##    -u, --usernames                   Extract and save the list of usernames gathered
##
##  Date and time: the dates must exist in the file
##    --start mm/dd/yyyy                Extract hashes starting from the date specified
##    --end mm/dd/yyyy                  Extract hashes till the date specified (included)

#TODO
# * nslookup/ping the machine to check if it alive/true
# * print client IP information (IP)

# Print help
function usage {
  
  if [ "$1" == 1 ] ; then
    echo -e "" && grep -E '^## ?' "$0" | sed -E 's/^## ?//g' | sed -n '7p' && echo -e ""
  else
    grep -E '^## ?' "$0" | sed -E 's/^## ?//g'
  fi
  exit
}

#check if the date format is correct
function checkDate()
{
  if date -d $1 2>&1 > /dev/null # With a bit of luck this will work...
  then
      local VAL=$1
      local OPT=$2
      
      if [[ -z "${VAL}" || "${VAL}" =~ ^[[:space:]]*$ || "${VAL}" == -* ]] ; then 
        echo -e "\n  ERROR: Missing argument for option: ${OPT}\n" >&2; 
        exit 1
      fi
  else
      echo -e "Please use mm/dd/yyy \n" >&2;
      exit
  fi
}

#check if starting date is less than end date
function checkStartEnd()
{

  MIN=`date --date="$1" +%s`
  MAX=`date --date="$2" +%s`
  
  if [[ MIN -gt MAX ]] ; then 
    echo -e "\n\t  E NO! --end MUST be greater than --start  \n";
    exit
  fi

}

# check parameters
function ifEmpty()
{
    local VAL=$1
    local OPT=$2

    if [[ -z "${VAL}" || "${VAL}" =~ ^[[:space:]]*$ || "${VAL}" == -* ]] ; then 
      echo -e "\n  ERROR: Missing argument for option: ${OPT}\n" >&2; 
      exit 1
    fi
}


#START HERE

# print manual if no options
if [ "$1" == "" ] ; then
  usage
fi

# set some variables for later 
INPUT=false
ALLHASH=false
PROTOCOLS=".*" #By default all protocols
HASHTYPE=".*" #By default all hash types
USER="" #By default all users
DOMAIN="" #By default all domains
USERNAMESOPT=false
SHOWIP=false #By default all domains


# parse the parameter passes
OPTS=`getopt -o hi:o:AH:P:U:D:I:u --long input:,output:,start:,end:,protocols:,hash-type:,user:,domain:,usernames,show-ip,help -n 'parse-options' -- "$@"`

if [ $? != 0 ]
then
    usage "1"
    exit 1
fi

eval set -- "$OPTS"

while true; do
  case "$1" in
    -h  | --help)       usage ; exit ;;
    -i  | --input)      ifEmpty "$2" "$1"; INPUT=$2 ; shift 2 ;;
    -o  | --output)     ifEmpty "$2" "$1"; OUTPUT=$2; shift 2 ;;
    -H  | --hash-type)  ifEmpty "$2" "$1"; HASHTYPE=$2; shift 2 ;;
    -P  | --protocols)  ifEmpty "$2" "$1"; PROTOCOLS=$2; shift 2 ;;    
    -U  | --user)       ifEmpty "$2" "$1"; USER=$2; shift 2 ;;
    -u  | --usernames)  USERNAMESOPT=true ; shift ;;
    -D  | --domain)     ifEmpty "$2" "$1"; DOMAIN=$2; shift 2 ;;    
    -I  | --show-ip)    SHOWIP=true ; shift ;;
          --start)      checkDate "$2" "$1"; STARTDATE=$2; shift 2 ;;
          --end)        checkDate "$2" "$1"; ENDDATE=$2; shift 2 ;;
    -A)                 ALLHASH=true ; shift ;;
    --)                 shift; break ;;
    * )                 break ;;
  esac
done



# check if the dates are congruent
checkStartEnd $STARTDATE $ENDDATE

# take the input file name if it is not provided with the -i option but directly in the command
# ex: ./extractResponderHashes pathToFile.log -o out.txt
if [ -z $1 ]; then
  if [ -z $INPUT ]; then
    echo -e "\n  ERROR: Missing the responder input file! Please check the manual. \n"
  fi
else
  INPUT=$1
fi

# temporary file to work with
TMP1=$(mktemp tmp.resp.XXXXXXX)
TMP2=$(mktemp tmp.resp.XXXXXXX)
USERNAMES=$(mktemp tmp.resp.XXXXXXX)
FINALRES=$(mktemp tmp.resp.XXXXXXX)

# remove non UTF-8 characters from the input file
cat $INPUT | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | strings -n 8 >> $TMP1


# Remove junk lines from the log
grep -iE "Hash *:.+[^:]+::.+:[a-zA-Z0-9_]+" $TMP1 > $FINALRES
cp $FINALRES $TMP1

# extract date in a range - improve by checking if the date exists and if not, increase it till you find a match
if [[ $STARTDATE && $ENDDATE ]] ; then 
  firstLine=$(grep -n -m 1 $STARTDATE $TMP1 |cut -f1 -d: )
  lastLine=$(grep -no $ENDDATE $TMP1 | tail -1 | awk -F'[_:]' '{print $1}')

  if [[ $firstLine == "" || $lastLine == "" ]] ; then 
    echo "The specified date does not exist. Please check your input"
    exit
  fi

  sed -n "$firstLine,$lastLine p" $TMP1 >> $FINALRES
  cp $FINALRES $TMP1
fi

#Extract all usernames
if $USERNAMESOPT ; then
  grep -ioP "Hash +: (.*)::+" $TMP1 | cut -d:  -f 2 | cut -c 2- > $USERNAMES
fi

#[TODO] already cleaned the TMP file from useless lines, so change the regex in a simpler one

grep -ioE "(\[($PROTOCOLS)\] )(($HASHTYPE) )(Hash +:)( (.*$USER.*)::)(.*$DOMAIN.*)([^:])?(:)((.*[^:]):)(:*[a-zA-Z0-9_]+)([:]+[a-zA-Z0-9_]+)+" $TMP1 | grep -ioE "[^:]+::.+:[a-zA-Z0-9_]+" > $FINALRES
cp $FINALRES $TMP1




# extract only one occurence per user (avoid multiple hases for each user)
if [ "$ALLHASH" == false ] ; then
  for user in $(egrep -ioE '(.*::[^:]+:)' $FINALRES | sort -u) ; do 
        grep "$user" $FINALRES | grep -ioE "[^:]+::.+$" | tail -n 1 | sort -u >> $TMP2
  done
  cp $TMP2 $FINALRES
fi

# remove white spaces
awk '{print $1}' $FINALRES > $TMP1
cp $TMP1 $FINALRES


truncate -s 0  $TMP1 $TMP2
cat $INPUT | strings -n 8 >> $TMP1
if [[ $SHOWIP == true ]] ; then
  while read -r line
  do
      grep -iE -B2 "$line" $TMP1 >> $TMP2
  done < "$FINALRES"
  
cp $TMP2 $FINALRES
fi

# Write the results into a file or stout
if [ "$OUTPUT" == "" ] ; then
  echo -e "\n === LIST OF HASHES === \n"
  cat $FINALRES #stdout
  if $USERNAMESOPT ; then
    echo -e "\n === LIST OF USERNAMES === \n"
    cat $USERNAMES
  fi
else
  mv $FINALRES $OUTPUT #file provided in the command
  if $USERNAMESOPT ; then
    mv $USERNAMES "$OUTPUT.usernames"
  fi
fi


# Delete all temp files
trap "rm -f $TMP1 $FINALRES $TMP2 $USERNAMES" EXIT
